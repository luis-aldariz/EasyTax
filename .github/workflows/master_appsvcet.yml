# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - appsvcet

on:
  push:
    branches:
      - master
  workflow_dispatch:
env:
  SWASHBUCLE_ASPNET_CORE_CLI_PACKAGE_VERSION: 5.6.3
  WORKING_DIRECTORY: EasyTax.Service
  API_IMPORT_SPECIFICATION_PATH: EasyTax.Service\publish\swagger.json
  API_IMPORT_DLL: EasyTax.Service\bin\Release\net8.0\EasyTax.Service.dll
  API_IMPORT_VERSION: v1
  AZURE_APIM_RESOURCE_PATH: /api
  AZURE_APIM_RESOURCEGROUP: easytax_rg
  AZURE_APIM_SERVICENAME: EasyTaxServiceApi
  AZURE_APIM_API_ID: EasyTaxService
  AZURE_APIM_APPSERVICEURL: https://appsvcet-cbazb7fshcatfvfj.canadacentral-01.azurewebsites.net

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp


      - name: Install Swashbuckle CLI .NET Global Tool
        run: dotnet tool install --global Swashbuckle.AspNetCore.Cli --version ${{ env.SWASHBUCLE_ASPNET_CORE_CLI_PACKAGE_VERSION }}
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      - name: Generate Open API Specification Document
        run: swagger tofile --output "${{ env.API_IMPORT_SPECIFICATION_PATH }}" "${{ env.API_IMPORT_DLL }}" "${{ env.API_IMPORT_VERSION }}"

      
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

      - name: Install EntityFrameworkCore Tools
        run: |
          dotnet new tool-manifest
          dotnet tool install dotnet-ef
          
      - name: Generate EF Core Migration Script
        run: dotnet ef migrations script --idempotent --no-build --configuration Release --output ${{env.DOTNET_ROOT}}/sql/sql-script.sql --context EasyTax.Service.Data.TaxContext --project ${{ github.workspace }}/EasyTax.Service/EasyTax.Service.csproj
    
      - uses: actions/upload-artifact@v3
        with:
          name: ddl-updates
          path: ${{env.DOTNET_ROOT}}/sql/sql-script.sql

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_169EAE3D626C4ACA8FBF1B7D0A325EAE }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_CFA35BA35EAA4DA4BE58DE2DD01D46FA }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_FE4F3666E0B547A7910C2C93B75FFE5A }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'appsvcet'
          slot-name: 'Production'
          package: ./.net-app/

      - name: Azure SQL Deploy
        uses: Azure/sql-action@v2
        with:
          # The connection string, including authentication information, for the Azure SQL Server database.
          connection-string: ${{ secrets.SQL_CONNECTION_STRING }}
          # Path to the file used for this action. Supported file types are .sql, .dacpac, or .sqlproj.
          path: ./ddl-updates/sql-script.sql


      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.EasyTaxServiceApi_SPN }}
      - name: Import API into Azure API Management
        run: az apim api import --path "${{ env.AZURE_APIM_RESOURCE_PATH }}" --resource-group "${{ env.AZURE_APIM_RESOURCEGROUP }}" --service-name "${{ env.AZURE_APIM_SERVICENAME }}" --api-id "${{ env.AZURE_APIM_API_ID }}" --service-url "${{ env.AZURE_APIM_APPSERVICEURL }}" --specification-path "${{ env.API_IMPORT_SPECIFICATION_PATH }}" --specification-format OpenApi --subscription-required false
      - name: logout
        run: >
           az logout
